// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique
  password       String
  role           Role
  subscription   Subscription?  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  projects       Project[]
  tasks          Task[]
  comments       Comment[]
  favorites      Favorite[]
  histories      History[]
  notifications  Notification[]
}

model Favorite {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  taskId    String? // Optional: Either task or project will be favorited
  projectId String? // Optional

  createdAt DateTime @default(now())
}

model History {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  taskId    String? // Optional
  projectId String? // Optional

  action    String // e.g., "VIEWED", "UPDATED"
  createdAt DateTime @default(now())
}

model Project {
  id          String @id @default(cuid())
  title       String
  description String
  ownerId     String
  owner       User   @relation(fields: [ownerId], references: [id])
  tasks       Task[]
}

model Task {
  id           String    @id @default(cuid())
  title        String
  description  String
  status       String
  priority     String
  dueDate      DateTime
  projectId    String
  project      Project   @relation(fields: [projectId], references: [id])
  assignedTo   User?     @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  comments     Comment[]
}

model Subscription {
  id        String    @id @default(uuid())
  users     User[]
  plan      String   @default("FREE") // FREE, PRO, ENTERPRISE
  startDate DateTime  @default(now())
  endDate   DateTime?
  status    String   @default("ACTIVE") // ACTIVE, CANCELLED
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
  CLIENT
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}
